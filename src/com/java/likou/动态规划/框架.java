package com.java.likou.动态规划;

public class 框架 {


    /* 背包问题
     1. 明确状态和选择
        状态: 题目的条件: 背包的容量和可选择的物品
        选择: 可选择的情况: 装进背包和不装进背包
        for 状态1 in 状态1的所有取值：
            for 状态2 in 状态2的所有取值：
                for ...
                    dp[状态1][状态2][...] = 择优(选择1，选择2...)
     2. 明确dp数组的含义
        dp数组的含义:dp数组是什么？其实就是描述问题局面的一个数组。
        换句话说，我们刚才明确问题有什么「状态」，现在需要用dp数组把状态表示出来。
        dp[i][w]的定义如下：对于前i个物品，当前背包的容量为w，这种情况下可以装的最大价值是dp[i][w]。

        int dp[N+1][W+1]
        dp[0][..] = 0
        dp[..][0] = 0

        for i in [1..N]:
            for w in [1..W]:
                dp[i][w] = max(
                    把物品 i 装进背包,
                    不把物品 i 装进背包
                )
        return dp[N][W]
        3. 根据「选择」，思考状态转移的逻辑
     */
}
